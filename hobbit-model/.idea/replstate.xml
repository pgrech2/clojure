<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1470849503209">{:repl-history {:ide [], :local [&quot;asym-hobbit-body-parts&quot; &quot;(let [x 3])&quot; &quot;(let [x 3] x)&quot; &quot;(def name-list [\&quot;Paul\&quot; \&quot;Mike\&quot; \&quot;John\&quot;])&quot; &quot;(let (take 2 name-list))&quot; &quot;(let (take 2 name-list) new-list)&quot; &quot;(let [new-list (take 2 name-list)]  new-list)&quot; &quot;(def x 0\n  )&quot; &quot;(let (x 1) x)&quot; &quot;(let [x 1] x)&quot; &quot;x&quot; &quot;(let [[name1 % other-names name-list]] name1)&quot; &quot;(let [[name1 % other-names] name-list] name1 other-names)&quot; &quot;name-list&quot; &quot;(let [[name1 &amp; other-names] name-list] name1 other\n                                       -names)&quot; &quot;(let [[name1 &amp; other-names] name-list] name1 other-names)&quot; &quot;(let [[n1 &amp; n] name-list] n1 n)&quot; &quot;(let [[pongo &amp; dalmatians] name-list]\n  [pongo dalmatians])&quot; &quot;(let [[n1 &amp; n] name-list] [n1 n])&quot; &quot;(doc matching-part)&quot; &quot;(source matching-part)&quot; &quot;(into [] (set [:a :a]))&quot; &quot;(-main)&quot; &quot;(re-find #\&quot;^left-\&quot; \&quot;left-eye\&quot;)&quot; &quot;#\&quot;^left-\&quot; \&quot;left-eye\&quot;&quot; &quot;(reduce [1 2 3 4])&quot; &quot;(reduce + [1 2 3 4])&quot; &quot;(reduce + 15 [1 2 3 4])&quot; &quot;(better-symmetrize-body-parts asym-hobbit-body-parts)&quot; &quot;(my-loop)&quot; &quot;(my-reduce)&quot; &quot;(symmetrize-body-parts asym-hobbit-body-parts)&quot; &quot;(hit asym-hobbit-body-parts)&quot; &quot;(str \&quot;this is\&quot; \&quot;a string\&quot;)&quot; &quot;(vector [\&quot;a\&quot; :b 3])&quot; &quot;(def (vector [\&quot;a\&quot; :b 3]))&quot; &quot;(def b (vector [\&quot;a\&quot; :b 3]))&quot; &quot;(nth b 1)&quot; &quot;(nth 1 b)&quot; &quot;(get 1 b)&quot; &quot;(get b [1])&quot; &quot;(get b 0)&quot; &quot;(b '[\&quot;a\&quot; :B 3])&quot; &quot;(b [\&quot;a\&quot; :B 3])&quot; &quot;(def b [\&quot;a\&quot; :b 3])&quot; &quot;b&quot; &quot;(b 1)&quot; &quot;(get b 1)&quot; &quot;(b 0)&quot; &quot;(this_is_a_list '(1 2 3))&quot; &quot;(def this_is_a_list '(1 2 3))&quot; &quot;(def this-is-a-list '(1 2 3))&quot; &quot;this-is-a-list&quot; &quot;(class this-is-a-list)&quot; &quot;(class b)&quot; &quot;(defn add100 [x] (+ x 100))&quot; &quot;(add100 100)&quot; &quot;(defn dec-maker #(% - 9))&quot; &quot;(defn dec-maker #(- % 9))&quot; &quot;(def dec-maker #(- % 9))&quot; &quot;(def def-maker [def] #(- % def))&quot; &quot;(def [def] def-maker #(- % def))&quot; &quot;(defn def-maker [def] #(- % def))&quot; &quot;(def def9 (def-maker 9))&quot; &quot;(def9 10)&quot; &quot;(map + [1 2 3])&quot; &quot;(map inc [1 2 3])&quot; &quot;(reduce + 15 [1 2 3 4]) &quot;], :remote []}}</component>
</project>