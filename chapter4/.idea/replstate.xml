<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1471974047120">{:repl-history {:ide [], :local [&quot;(-main)&quot; &quot;(titleize \&quot;Paul\&quot;)&quot; &quot;(map titleize [\&quot;Paul\&quot; \&quot;cars\&quot; \&quot;data science\&quot;])&quot; &quot;(map titleize '(\&quot;List1\&quot; \&quot;List2\&quot;))&quot; &quot;(map titleize (\&quot;List1\&quot; \&quot;List2\&quot;))&quot; &quot;(map titleize #{\&quot;Map1\&quot; \&quot;Map2\&quot;})&quot; &quot;(map #(titleize (second %)) {:uncomfortable-thing \&quot;Winking\&quot;})&quot; &quot;(map #(titleize (first %)) {:uncomfortable-thing \&quot;Winking\&quot;})&quot; &quot;(class '(1 2 3 ))&quot; &quot;(seq (class '(1 2 3 )))&quot; &quot;(class (seq '(1 2 3 )))&quot; &quot;(class (seq [1 2 3]))&quot; &quot;(seq [1 2 3])&quot; &quot;(seq #{1 2 3})&quot; &quot;(class (seq #{1 2 3}))&quot; &quot;(class #{1 2 3})&quot; &quot;({a: 1 b: 2 c: 3})&quot; &quot;(#{a: 1 b: 2 c: 3})&quot; &quot;(#{:a 1 :b 2 :c 3})&quot; &quot;#{:a 1 :b 2 :c 3}&quot; &quot;(seq #{:a 1 :b 2 :c 3})&quot; &quot;(into {} (seq #{:a 1 :b 2 :c 3}))&quot; &quot;(into {} (seq {:a 1 :b 2 :c 3}))&quot; &quot;(seq {:a 1 :b 2 :c 3})&quot; &quot;(map inc [1 2 3])&quot; &quot;(map str [\&quot;A\&quot; \&quot;B\&quot; \&quot;C\&quot;] [\&quot;a\&quot; \&quot;b\&quot; \&quot;c\&quot;])&quot; &quot;(defn unify\n  [v1 v2]\n  {v1: v1 v2: v2})&quot; &quot;(def var1 [0.5 0.6 0.32])&quot; &quot;(def var2 [1.5 1.6 1.32])&quot; &quot;(defn unify\n  [v1 v2]\n  {:v1 v1 :v2 v2})&quot; &quot;(map unify var1 var2)&quot; &quot;(+ [1 2 3] [10 11 12])&quot; &quot;(map + [1 2 3] [10 11 12])&quot; &quot;(def sum #(reduce + %))&quot; &quot;(def avg #(/ (sum %) (count %)))&quot; &quot;(defn stats\n  [numbers]\n  (map numbers [sum count avg]))&quot; &quot;(defn stats\n  [numbers]\n  (map #(% numbers) [sum count avg]))&quot; &quot;(stats [1 2 3])&quot; &quot;(defn stats\n  \&quot;Calculate sum, count and average of a vector\&quot;\n  [numbers]\n  (map #(% numbers) [sum count avg]))&quot; &quot;(keys (ns-publics 'foo))&quot; &quot;(keys (ns-publics chapter4.core))&quot; &quot;(defmonad censor m-when-not m+write+m maybe-m maybe-t ...)&quot; &quot;(def a 2)&quot; &quot;(def identities\n  [{:alias \&quot;Batman\&quot; :real \&quot;Bruce Wayne\&quot;}\n   {:alias \&quot;Spider-Man\&quot; :real \&quot;Peter Parker\&quot;}\n   {:alias \&quot;Santa\&quot; :real \&quot;Your mom\&quot;}\n   {:alias \&quot;Easter Bunny\&quot; :real \&quot;Your dad\&quot;}])&quot; &quot;a&quot; &quot;var1&quot; &quot;var2&quot; &quot;(keys (ns-publics 'chapter4.core))&quot; &quot;(map :real identities)&quot; &quot;(assoc (assoc {} :max (inc 30)) :min (inc 10))&quot; &quot;(reduce\n  (fn [new-map [key val]]\n    (assoc new-map key (inc val)))\n  {}\n  {:max 30 :min 10})&quot; &quot;(reduce (fn [new-map [key val]]\n          (if (&gt; val 4)\n            (assoc new-map key val)\n            new-map))\n        {}\n        {:human 4.1\n         :critter 3.9})&quot; &quot;(take 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(drop 3 [1 2 3 4 5 6 7 8 9 10])&quot; &quot;(:month {:month 1 :day 1 :human 5.3 :critter 2.3})&quot; &quot;(take-while #(&lt; (:month %) 4) food-journal)&quot; &quot;(def food-journal\n  [{:month 1 :day 1 :human 5.3 :critter 2.3}\n   {:month 1 :day 2 :human 5.1 :critter 2.0}\n   {:month 2 :day 1 :human 4.9 :critter 2.1}\n   {:month 2 :day 2 :human 5.0 :critter 2.5}\n   {:month 3 :day 1 :human 4.2 :critter 3.3}\n   {:month 3 :day 2 :human 4.0 :critter 3.8}\n   {:month 4 :day 1 :human 3.7 :critter 3.9}\n   {:month 4 :day 2 :human 3.7 :critter 3.6}])&quot; &quot;food-journal&quot; &quot;(take-while #(&lt; (:month %) 2) food-journal)&quot; &quot;(take-while #(&gt; 2 (:month %)) food-journal)&quot; &quot;(take-while #(&lt; 2 (:month %)) food-journal)&quot; &quot;(take-while #(&gt; (:month %) 2) food-journal)&quot; &quot;(&gt; (:month {:month 4 :day 2 :human 3.7 :critter 3.6}) 3)&quot; &quot;(drop-while #(&lt; (:month %) 3) food-journal)\n(take-while #(&lt; (:month %) 3) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 3) (drop-while #(&gt; (:month %) 2) food-journal))&quot; &quot;(take-while #(&lt; (:month %) 3) (drop-while #(&lt; (:month %) 2) food-journal))&quot; &quot;(drop-while #(&gt; (:month %) 2) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 3) (drop-while #(&lt; (:month %) 3) food-journal))&quot; &quot;(take-while #(&gt; (:month %) 3) (drop-while #(&lt; (:month %) 3) food-journal))&quot; &quot;(&lt; 3 3)&quot; &quot;(fn #(&lt; (:month %) 3) food-journal)&quot; &quot;(#(&lt; (:month %) 3) food-journal)&quot; &quot;(:month food-journal)&quot; &quot;(map &lt; 3 (map :month food-journal))&quot; &quot;(map &lt; (map :month food-journal) 3)&quot; &quot;(map :month food-journal)&quot; &quot;(&lt; 3 4)&quot; &quot;(#(&lt; % 3) 4)&quot; &quot;(#(&lt; % 4) 3)&quot; &quot;(take-while #(&lt; (:month %) 3) food-journal)&quot; &quot;(take-while #(&gt; (:month %) 3) food-journal)&quot; &quot;(drop-while #(&gt; (:month %) 3) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 2) (drop-while #(&lt; (:month %) 4) food-journal))&quot; &quot;(drop-while #(&lt; (:month %) 4) food-journal)&quot; &quot;(drop-while #(&lt; (:month %) 3) food-journal)&quot; &quot;(drop-while #(&lt; (:month %) 2) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 4) (drop-while #(&lt; (:month %) 2) food-journal))&quot; &quot;(take-while #(= (:month %) 3) food-journal)&quot; &quot;(take-while #(= (:month %) 1) food-journal)&quot; &quot;(take-while #(&lt; (:month %) 1) food-journal)&quot; &quot;(def food-journal\n  [{:month 1 :day 1 :human 5.3 :critter 2.3}\n   {:month 1 :day 2 :human 5.1 :critter 2.0}\n   {:month 2 :day 1 :human 4.9 :critter 2.1}\n   {:month 2 :day 2 :human 5.0 :critter 2.5}\n   {:month 3 :day 1 :human 4.2 :critter 3.3}\n   {:month 3 :day 2 :human 4.0 :critter 3.8}\n   {:month 4 :day 1 :human 3.7 :critter 3.9}\n   {:month 4 :day 2 :human 3.7 :critter 3.6}\n   {:month 5 :day 1 :human 3.7 :critter 3.9}\n   {:month 5 :day 2 :human 3.7 :critter 3.6}])&quot; &quot;(+ 1 2)&quot; &quot;(food-journal)&quot; &quot;(get food-journal)&quot; &quot;(println food-journal)&quot;], :remote []}}</component>
</project>