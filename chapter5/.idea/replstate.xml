<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1472233748815">{:repl-history {:ide [], :local [&quot;(filter (fn [x] true) '(:anything :goes :here))&quot; &quot;(sleepy-identity 5)&quot; &quot;(sleepy-indentity 5)&quot; &quot;(sleepy-identity \&quot;paul\&quot;)&quot; &quot;(def mem-sleepy-identity (memoize sleepy-identity))&quot; &quot;(mem-sleepy-identity \&quot;paul\&quot;)&quot; &quot;(ns-name *ns*)&quot; &quot;(map (inc [1 2]))&quot; &quot;(map inc '(1 2))&quot; &quot;(map inc [1 2])&quot; &quot;'(map inc [1 2])&quot; &quot;(class '(map inc [1 2]))&quot; &quot;(class (map inc [1 2]))&quot; &quot;(def var1 (map inc [1 2]))&quot; &quot;(class var1)&quot; &quot;(nth var1 1)&quot; &quot;(class (lazy-seq '(\&quot;hello\&quot; :there)))&quot; &quot;(class (lazy-seq var1))&quot; &quot;(class '(\&quot;hello\&quot; :there))&quot; &quot;(class (list '(\&quot;hello\&quot; :there)))&quot; &quot;(get (ns-interns *ns*) 'great-books)&quot; &quot;(get (ns-interns *ns*) \&quot;var1\&quot;)&quot; &quot;(get (ns-interns *ns*) 'var1\n     )&quot; &quot;(ns-map *ns*)&quot; &quot;(get (ns-interns *ns*) 'var1)&quot; &quot;(deref #'chapter5.core/var1)&quot; &quot;var1&quot; &quot;(ns-interns *ns*)&quot; &quot;(def cheddars [\&quot;mild\&quot; \&quot;medium\&quot; \&quot;strong\&quot; \&quot;sharp\&quot; \&quot;extra sharp\&quot;])&quot; &quot;cheese-taxonomy/cheddars&quot; &quot;cheese-analysis/cheddars&quot; &quot;(in-ns cheese-analysis)&quot; &quot;(ns-unmap cheddars)&quot; &quot;(ns-unmap 'cheddars)&quot; &quot;(in-ns 'local)&quot; &quot;(in-ns cheese-taxonomy)&quot; &quot;(def cheddars [\&quot;mild\&quot; \&quot;medium\&quot; \&quot;strong\&quot; \&quot;sharp\&quot; \&quot;extra-sharp\&quot;])&quot; &quot;(def bries [\&quot;first-brie\&quot; \&quot;second-brie\&quot; \&quot;third-brie\&quot;])&quot; &quot;(in-ns 'cheese-analysis)&quot; &quot;(clojure.core/refer 'cheese-taxonomy)&quot; &quot;(clojure.core/get (clojure.core/ns-map clojure.core/*ns*) 'bries)&quot; &quot;(clojure.core/refer 'cheese-taxonomy :only ['bries])&quot; &quot;(remove-ns 'cheese-taxonomy)&quot; &quot;(remove-ns 'cheese-analysis)&quot; &quot;(in-ns 'cheese-taxonomy)&quot; &quot;(clojure.core/remove-ns 'cheese-taxonomy)&quot; &quot;(clojure.core/remove-ns 'cheese-analysis)&quot; &quot;(in-ns chapter5)&quot; &quot;(in-ns chapter5.core)&quot; &quot;(clojure.core/all-ns)&quot; &quot;(in-ns 'user)&quot; &quot;(find-ns 'user)&quot; &quot;(in-ns 'chapter5.core)&quot; &quot;(-main)&quot; &quot;(def bries [\&quot;brie-1\&quot; \&quot;brie-2\&quot;])&quot; &quot;(def cheddars [\&quot;mild\&quot; \&quot;medium\&quot; \&quot;strong\&quot;])&quot; &quot;(clojure.core/refer 'cheese.taxonomy :only 'bries)&quot; &quot;(clojure.core/refer 'cheese.taxonomy :only ['bries])&quot; &quot;(clojure.core/ns-unmap *ns* bries)&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis bries)&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis [bries])&quot; &quot;(clojure.core/ns-interns)&quot; &quot;(in-ns 'cheese.analys)&quot; &quot;(clojure.core/remove-ns 'cheese.analys)&quot; &quot;(clojure.core/ns-inter *ns*)&quot; &quot;(clojure.core/ns-inter 'cheese.analysis)&quot; &quot;(clojure.core/ns-interns *ns*)&quot; &quot;(clojure.core/refer 'cheese.taxonomy :exclude ['bries])&quot; &quot;(clojure.core/ns-inters 'cheese.analysis)&quot; &quot;(clojure.core/ns-interns 'cheese.analysis)&quot; &quot;(in-ns cheese.taxonomy)&quot; &quot;(clojure.core/ns-inters 'cheese.taxonomy)&quot; &quot;(clojure.core/ns-interns 'cheese.taxonomy)&quot; &quot;(clojure.core/rename 'cheese.taxonomy ['bries 'yummy-bries])&quot; &quot;(clojure.core/rename 'cheese.taxonomy \&quot;rename\&quot; {'bries 'yummy-bries})&quot; &quot;(clojure.core/refer 'cheese.taxonomy \&quot;rename\&quot; {'bries 'yummy-bries})&quot; &quot;(clojure.core/refer 'cheese.taxonomy :rename {'bries 'yummy-bries})&quot; &quot;yummy-bires&quot; &quot;yummy-bries&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis ['bries 'yummy-bries])&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis {'bries 'yummy-bries})&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis ['bries])&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis 'cheddars)&quot; &quot;(clojure.core/ns-unmap 'cheese.analysis 'bries)&quot; &quot;bries&quot; &quot;cheddar&quot; &quot;cheddars&quot; &quot;(cheese.taxonomy/cheddars)&quot; &quot;(clojure.core/cheese.taxonomy/cheddars)&quot; &quot;(cheese.taxonomy)&quot; &quot;(defn- private-function\n       \&quot;Just an example function that does nothing\&quot;\n       [])&quot; &quot;(clojure.core/refer-clojure)&quot; &quot;(defn public-function\n      \&quot;this is a function that can be seen form elsewhere\&quot;\n      [x]\n      (println (str \&quot;input: \&quot; x)))&quot; &quot;(public-function \&quot;this is public\&quot;)&quot; &quot;(in-ns cheese.analysis)&quot; &quot;(public-function)&quot; &quot;(in-ns 'cheese.taxonomy)&quot; &quot;(defn- private-function \&quot;this is a private function\&quot; [x] (println (str \&quot;private input: \&quot; x)))&quot; &quot;(in-ns 'cheese.analysis)&quot; &quot;(cheese.taxonomy/private-function \&quot;hello\&quot;)&quot; &quot;(cheese.taxonomy/public-function \&quot;hello\&quot;)&quot;], :remote []}}</component>
</project>